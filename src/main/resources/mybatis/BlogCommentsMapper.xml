<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="BlogCommentsMapper" >
  <resultMap id="BaseResultMap" type="com.space.entity.BlogComments" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="user_id" property="userId" jdbcType="INTEGER" />
    <result column="article_id" property="articleId" jdbcType="INTEGER" />
    <result column="comments_num_like" property="commentsNumLike" jdbcType="BIGINT" />
    <result column="comments_date" property="commentsDate" jdbcType="TIMESTAMP" />
    <result column="parent_comments_id" property="parentCommentsId" jdbcType="INTEGER" />
 	 	 
  </resultMap>
  
  <resultMap id="ResultMapWithBLOBs" type="com.space.entity.BlogComments" extends="BaseResultMap" >
    <result column="comments_content" property="commentsContent" jdbcType="LONGVARCHAR" />
    
    <association property="user" javaType="com.space.entity.User"
    column="user_id" select="selectUserByUserId">
    	
    </association>   
   
    <!-- 二级评论 -->
 	<collection property="blogCommentsReplies" ofType="com.space.entity.BlogCommentsReply"
 	column="id" select="selectBlogCommentsReplies" > 	
 	</collection>
  </resultMap>
  
  <!-- 二级评论 resultMap -->
  <resultMap id="ResultMapwithCommentsReply" type="com.space.entity.BlogCommentsReply" >
  	<id column="id" property="id" jdbcType="INTEGER" />
    <result column="blog_id" property="blogId" jdbcType="INTEGER" />
    <result column="user_id" property="userId" jdbcType="INTEGER" />
    <result column="replg_user_id" property="replgUserId" jdbcType="INTEGER" />
    <result column="content" property="content" jdbcType="VARCHAR" />
    <result column="content_num_like" property="contentNumLike" jdbcType="INTEGER" />
    <result column="createtime" property="createtime" jdbcType="TIMESTAMP" />
    <result column="updatetime" property="updatetime" jdbcType="TIMESTAMP" />
    
    <!-- 回复用户ID 查询用户名及头像 -->
    <association  property="user" column="user_id" 
    javaType="com.space.entity.User" select="selectUserByUserId">    
    </association>
    
     <!-- 被回复用户ID 查询用户名 -->
    <association  property="replyUser" column="replg_user_id" 
    javaType="com.space.entity.User" select="selectUserByReplyUserId">    
    </association> 
    
  </resultMap>
  	<!-- 用户信息 resultMap -->
  <resultMap id="ResultMapwithUser" type="com.space.entity.User" >
  	<id property="id" column="id"/>
  	<result  property="username" column="username"/>
  	<result  property="headImgUrl" column="head_img_url"/>
  </resultMap>
  	
  	<select id="selectUserByUserId" parameterType="Integer" resultMap="ResultMapwithUser">
  		select id , username, head_img_url
  		from tb_user where id=#{user_id}
  	</select>
  	
  	<select id="selectUserByReplyUserId" parameterType="Integer" resultMap="ResultMapwithUser">
  		select id , username, head_img_url
  		from tb_user where id=#{replg_user_id}
  	</select>
  
  
  	<!-- ==========查询二级评论================= -->
  	<select id="selectBlogCommentsReplies" parameterType="java.lang.Integer" resultMap="ResultMapwithCommentsReply" >
  		select * 
  		from blog_comments_reply 
  		where blog_id = #{id}
  	</select>
  
  
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, user_id, article_id, comments_num_like, comments_date, parent_comments_id
  </sql>
  <sql id="Blob_Column_List" >
    comments_content
  </sql>
  
  <!-- 通过文章id查询评论 -->
   <select id="selectByArticleID" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from blog_comments
    where article_id = #{id,jdbcType=INTEGER}
  </select>
  
  
  <select id="selectByExampleWithBLOBs" resultMap="ResultMapWithBLOBs" parameterType="com.space.entity.BlogCommentsExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from blog_comments
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.space.entity.BlogCommentsExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from blog_comments
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from blog_comments
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from blog_comments
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.space.entity.BlogCommentsExample" >
    delete from blog_comments
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.space.entity.BlogComments" >
    insert into blog_comments (id, user_id, article_id, 
      comments_num_like, comments_date, parent_comments_id, 
      comments_content)
    values (#{id,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{articleId,jdbcType=INTEGER}, 
      #{commentsNumLike,jdbcType=BIGINT}, #{commentsDate,jdbcType=TIMESTAMP}, #{parentCommentsId,jdbcType=INTEGER}, 
      #{commentsContent,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.space.entity.BlogComments" >
    insert into blog_comments
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="userId != null" >
        user_id,
      </if>
      <if test="articleId != null" >
        article_id,
      </if>
      <if test="commentsNumLike != null" >
        comments_num_like,
      </if>
      <if test="commentsDate != null" >
        comments_date,
      </if>
      <if test="parentCommentsId != null" >
        parent_comments_id,
      </if>
      <if test="commentsContent != null" >
        comments_content,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="articleId != null" >
        #{articleId,jdbcType=INTEGER},
      </if>
      <if test="commentsNumLike != null" >
        #{commentsNumLike,jdbcType=BIGINT},
      </if>
      <if test="commentsDate != null" >
        #{commentsDate,jdbcType=TIMESTAMP},
      </if>
      <if test="parentCommentsId != null" >
        #{parentCommentsId,jdbcType=INTEGER},
      </if>
      <if test="commentsContent != null" >
        #{commentsContent,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.space.entity.BlogCommentsExample" resultType="java.lang.Integer" >
    select count(*) from blog_comments
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update blog_comments
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.userId != null" >
        user_id = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.articleId != null" >
        article_id = #{record.articleId,jdbcType=INTEGER},
      </if>
      <if test="record.commentsNumLike != null" >
        comments_num_like = #{record.commentsNumLike,jdbcType=BIGINT},
      </if>
      <if test="record.commentsDate != null" >
        comments_date = #{record.commentsDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.parentCommentsId != null" >
        parent_comments_id = #{record.parentCommentsId,jdbcType=INTEGER},
      </if>
      <if test="record.commentsContent != null" >
        comments_content = #{record.commentsContent,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map" >
    update blog_comments
    set id = #{record.id,jdbcType=INTEGER},
      user_id = #{record.userId,jdbcType=INTEGER},
      article_id = #{record.articleId,jdbcType=INTEGER},
      comments_num_like = #{record.commentsNumLike,jdbcType=BIGINT},
      comments_date = #{record.commentsDate,jdbcType=TIMESTAMP},
      parent_comments_id = #{record.parentCommentsId,jdbcType=INTEGER},
      comments_content = #{record.commentsContent,jdbcType=LONGVARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update blog_comments
    set id = #{record.id,jdbcType=INTEGER},
      user_id = #{record.userId,jdbcType=INTEGER},
      article_id = #{record.articleId,jdbcType=INTEGER},
      comments_num_like = #{record.commentsNumLike,jdbcType=BIGINT},
      comments_date = #{record.commentsDate,jdbcType=TIMESTAMP},
      parent_comments_id = #{record.parentCommentsId,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.space.entity.BlogComments" >
    update blog_comments
    <set >
      <if test="userId != null" >
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="articleId != null" >
        article_id = #{articleId,jdbcType=INTEGER},
      </if>
      <if test="commentsNumLike != null" >
        comments_num_like = #{commentsNumLike,jdbcType=BIGINT},
      </if>
      <if test="commentsDate != null" >
        comments_date = #{commentsDate,jdbcType=TIMESTAMP},
      </if>
      <if test="parentCommentsId != null" >
        parent_comments_id = #{parentCommentsId,jdbcType=INTEGER},
      </if>
      <if test="commentsContent != null" >
        comments_content = #{commentsContent,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.space.entity.BlogComments" >
    update blog_comments
    set user_id = #{userId,jdbcType=INTEGER},
      article_id = #{articleId,jdbcType=INTEGER},
      comments_num_like = #{commentsNumLike,jdbcType=BIGINT},
      comments_date = #{commentsDate,jdbcType=TIMESTAMP},
      parent_comments_id = #{parentCommentsId,jdbcType=INTEGER},
      comments_content = #{commentsContent,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.space.entity.BlogComments" >
    update blog_comments
    set user_id = #{userId,jdbcType=INTEGER},
      article_id = #{articleId,jdbcType=INTEGER},
      comments_num_like = #{commentsNumLike,jdbcType=BIGINT},
      comments_date = #{commentsDate,jdbcType=TIMESTAMP},
      parent_comments_id = #{parentCommentsId,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>